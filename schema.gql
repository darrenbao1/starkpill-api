# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Metadata {
  description: String!
  imageUrl: String!
  ingredient: String!
  background: String!
  mintPrice: String!
  fame: Float!
}

type ChangeAttribute {
  oldBackground: Int!
  oldIngredient: Int!
  newBackground: Int!
  newIngredient: Int!
  callee: User!
}

type Mint {
  mintPrice: String!
  background: Int!
  ingredient: Int!
  minter: User!
}

type Transfer {
  from: User!
  to: User!
}

type Fame {
  voter: String!
  amount: Int!
  incrementBy: Int!
}

type Defame {
  voter: String!
  amount: Int!
  incrementBy: Int!
}

type ScalarTransfer {
  from: String!
  to: Int!
}

type ScalarRemove {
  from: Int!
  to: String!
}

type Transaction {
  hash: String!
  token: Token!
  blockNumber: Int!
  timestamp: Timestamp!
  transactionType: TransactionType!
  mint: Mint
  transfer: Transfer
  changeAttribute: ChangeAttribute
  fame: Fame
  defame: Defame
  scalarTransfer: ScalarTransfer
  scalarRemove: ScalarRemove
  fameAmount: Int!
  defameAmount: Int!
  eventIndex: Int!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""Types of indexed transactions"""
enum TransactionType {
  MINT
  TRANSFER
  CHANGE_ATTRIBUTE
  FAME
  DEFAME
  SCALAR_TRANSFER
  SCALAR_REMOVE
}

type BackPackMetadataWithEquipped {
  id: Int!
  description: String!
  imageUrl: String!
  isIngredient: Boolean!
  itemName: String!
  equippedById: Int!
}

type TraitToken {
  traitTokenid: Int!
  owner: User!
  traitMetadata: BackPackMetadataWithEquipped!
  transactions: [Transaction!]!
}

type Comment {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  text: String!
  postId: Int!
  authorId: Int!
  authorAddress: String!
}

type Like {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  postId: Int!
  accountId: Int!
}

type Post {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  content: String!
  images: [String!]
  authorId: Int!
  authorAddress: String!
  comments: [Comment!]!
  likes: [Like!]!
  likedByAddresses: [String!]!
}

type User {
  id: Int!
  address: String!
  tokens: [Token!]!
  numberOfTokensOwned: Int!
  transactions: [Transaction!]!
  backpackTokens: [TraitToken!]!
  equippedTraitTokens: [TraitToken!]!
  totalFame: Int!
  dateJoined: DateTime!
  followers: [String!]!
  following: [String!]!
  followersCount: Int!
  followingCount: Int!
  username: String
  twitterHandle: String
  firstName: String
  lastName: String
  bio: String
  profilePictureTokenId: Int
  coverPictureUrl: String
  ensDomain: String
  location: String
  websiteUrl: String
  pos_x_CoverPicture: Int
  pos_y_CoverPicture: Int
  posts: [Post!]!
  getVotingPower: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Token {
  id: Int!
  transactions: [Transaction!]!
  owner: User!
  background: Int!
  ingredient: Int!
  metadata: Metadata!
  fame: Int!
  defame: Int!
}

type BackPackMetadata {
  id: Int!
  description: String!
  imageUrl: String!
  isIngredient: Boolean!
  itemName: String!
}

type PharmacyData {
  typeIndex: Float!
  index: Float!
  startAmount: Float!
  amount_left: Float!
}

type Query {
  query: String!
  token(tokenId: Int!): Token!
  tokens(tokenIds: [Int!]!): [Token!]!
  allTokens(skip: Int = 0, first: Int = 20, orderBy: OrderBy = DESC): [Token!]!
  allTokensByHighestFame(skip: Int = 0, first: Int = 20, orderBy: OrderBy = DESC): [Token!]!
  allTokensByLatest(skip: Int = 0, first: Int = 20, orderBy: OrderBy = DESC): [Token!]!
  allTokenByLowestFame(skip: Int = 0, first: Int = 20, orderBy: OrderBy = DESC): [Token!]!
  ownerBackpack(ownerAddress: String!): [BackPackMetadata!]!
  checkIsClaimed(tokenIds: [Int!]!, contract_address: String!): [Boolean!]!
  transaction(transactionHash: String!): Transaction!
  transactions(transactionHashes: [String!]!): [Transaction!]!
  allTransactions(skip: Int = 0, first: Int = 20, orderBy: OrderBy = DESC): [Transaction!]!
  traitToken(traitTokenId: Int!): TraitToken!
  traitTokens(traitTokenIds: [Int!]!): [TraitToken!]!
  user(address: String!): User!
  getEquippedIngredients(address: String!): [BackPackMetadataWithEquipped!]!
  getEquippedBackgrounds(address: String!): [BackPackMetadataWithEquipped!]!
  getPostsForUser(skip: Int = 0, first: Int = 20, orderBy: OrderBy = DESC, walletAddress: String!): [Post!]!
  postById(postId: Int!): Post!
  lastIndexedBlock: Int!
  getAllTokenIdsNotPresentInMetadata: [Int!]!
  getTokenIdsThatImageIsWrong: [Int!]!
  getPharmacyData: [PharmacyData!]!
  tokenIdsWithMissingMetadata: [Int!]!
}

"""
Ascending or descending block order. Ascending means the earliest block first, descending means the latest block first. Default is descending.
"""
enum OrderBy {
  ASC
  DESC
}

type Mutation {
  mutation: String!
  refreshMetadataForOneToken(tokenId: Int!): String!
  refreshMetadataForAllTokens: String!
  refreshBackPackMetadataForOneToken(tokenId: Int!): String!
  refreshBackPackMetadataForAllTokens: String!
  refreshBackPackMetadataForMissingTokens: String!
}