// !: A check was manually added to the first migration to ensure that the metadata table has only 1 row
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3 types of trxn: mint transfer, change attribute
enum EventType {
  MINT
  TRANSFER
  CHANGE_ATTRIBUTE
  FAME
  DEFAME
  SCALAR_TRANSFER
  SCALAR_REMOVE
}

// Should only have 1 row
model metadata {
  id               Int      @id @default(1)
  lastIndexedBlock Int
  lastIndexedTime  DateTime @default(now())
}

model TokenMetadata {
  id          Int     @id
  description String
  imageUrl    String
  ingredient  String
  background  String
  mintPrice   Decimal @db.Decimal(50, 0)
  fame        Int
}

model Event {
  transactionHash String    
  eventIndex Int 
  to              String // the address of the user, mint to or transfer to address, or the address changing attributes
  tokenId         Int
  blockNumber     Int
  timestamp       DateTime
  eventType       EventType
  // can't have relationship with TokenMetadata because TokenMetadata is added after the event is created, breaking the foreign key constraint

  Mint            Mint?
  ChangeAttribute ChangeAttribute?
  Transfer        Transfer?
  Fame            Fame?
  Defame          Defame?
  ScalarTransfer ScalarTransfer?
  ScalarRemove ScalarRemove?
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model Mint {
  transactionHash String  
  eventIndex Int 
  event           Event   @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  mintPrice       Decimal @db.Decimal(50, 0)
  // these are the ids of the background and ingredient NFTs associated with this NFT
  background      Int
  ingredient      Int
   @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model ChangeAttribute {
  transactionHash String
  eventIndex Int 
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  // these are the ids of the background and ingredient NFTs associated with this NFT
  oldBackground   Int
  oldIngredient   Int
  newBackground   Int
  newIngredient   Int
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model Transfer {
  transactionHash String 
  eventIndex Int
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  from            String
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model Fame {
  transactionHash String 
  eventIndex Int
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  voter          String
  amount          Int
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model Defame {
  transactionHash String 
  eventIndex Int
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  voter          String
  amount          Int
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model ScalarTransfer {
  transactionHash String 
  eventIndex Int
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  from            String
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model ScalarRemove {
  transactionHash String 
  eventIndex Int
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  from            Int
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}



model BackpackMetadata {
    id          Int     @id
    description String
    imageUrl    String
    isIngredient Boolean
    itemName String
}
model Backpack {
    id          Int     @id
    ownerAddress String 
}

model PharmacyData {
  typeIndex          Int     
  index              Int   
  startAmount        Int
  amount_left       Int
  @@id([typeIndex, index], name: "typeIndex_index")
}

model VotingBooth {
  tokenId Int @id
  time_Stamp DateTime
}

model VotingPowerIds {
  tokenId Int @id
}

model TraitRedemption {
  l1_address String 
  l1_tokenId Int
  tokenId Int
  to String
  @@id([l1_address, l1_tokenId,tokenId], name: "l1_address_l1_tokenId_tokenId")
}

model KnownTraits {
  tokenId Int @id
}

model Account {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  walletAddress String @unique
  walletAddressHash String @unique
  email String? @unique
  username String? @unique
  twitterHandle String? @unique
  firstName String?
  lastName String?
  bio String?
  location String?
  ensDomain String?
  websiteUrl String?


  //tokenId for PFP and Cover Picture
  profilePictureTokenId Int?
  coverPictureUrl String?
  pos_x_CoverPicture Int?
  pos_y_CoverPicture Int?



  // Relations
  posts Post[] @relation("AccountPosts")
  likedPosts Like[] @relation("AccountLikedPosts")
  comments Comment[] @relation("AccountComments")

  followedBy    Follow[] @relation("following")
  following     Follow[] @relation("follower")
  @@map("accounts")
}
model Follow {
  follower    Account @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   Account @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])

  @@map("follows")
}
model Post {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  content String

  image           String?    // URL to the post image

  // Relations
  author          Account      @relation("AccountPosts", fields: [authorId], references: [id])
  authorId        Int

  likes           Like[]    @relation("PostLikes")

  comments        Comment[] @relation("PostComments")

  @@map("posts")
}

model Like {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  post            Post      @relation("PostLikes", fields: [postId], references: [id])
  postId          Int

  account            Account      @relation("AccountLikedPosts", fields: [accountId], references: [id])
  accountId          Int

  @@map("likes")
}

model Comment {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  text            String    // The text of the comment

  // Relations
  post            Post      @relation("PostComments", fields: [postId], references: [id])
  postId          Int

  author          Account      @relation("AccountComments", fields: [authorId], references: [id])
  authorId        Int

  @@map("comments")
}