// !: A check was manually added to the first migration to ensure that the metadata table has only 1 row
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3 types of trxn: mint transfer, change attribute
enum EventType {
  MINT
  TRANSFER
  CHANGE_ATTRIBUTE
}

// Should only have 1 row
model metadata {
  id               Int      @id @default(1)
  lastIndexedBlock Int
  lastIndexedTime  DateTime @default(now())
}

model TokenMetadata {
  id          Int     @id
  description String
  imageUrl    String
  ingredient  String
  background  String
  mintPrice   Decimal @db.Decimal(50, 0)
  fame        Int
}

model Event {
  transactionHash String    
  eventIndex Int 
  to              String // the address of the user, mint to or transfer to address, or the address changing attributes
  tokenId         Int
  blockNumber     Int
  timestamp       DateTime
  eventType       EventType
  // can't have relationship with TokenMetadata because TokenMetadata is added after the event is created, breaking the foreign key constraint

  Mint            Mint?
  ChangeAttribute ChangeAttribute?
  Transfer        Transfer?

  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model Mint {
  transactionHash String  
  eventIndex Int 
  event           Event   @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  mintPrice       Decimal @db.Decimal(50, 0)
  // these are the ids of the background and ingredient NFTs associated with this NFT
  background      Int
  ingredient      Int
   @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model ChangeAttribute {
  transactionHash String
  eventIndex Int 
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  // these are the ids of the background and ingredient NFTs associated with this NFT
  oldBackground   Int
  oldIngredient   Int
  newBackground   Int
  newIngredient   Int
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}

model Transfer {
  transactionHash String 
  eventIndex Int
  event           Event  @relation(fields: [transactionHash,eventIndex], references: [transactionHash,eventIndex])
  from            String
  @@id([transactionHash, eventIndex], name: "transactionHash_eventIndex")
}



model BackpackMetadata {
    id          Int     @id
    description String
    imageUrl    String
    isIngredient Boolean
    itemName String
}
model Backpack {
    id          Int     @id
    ownerAddress String 
}

model PharmacyData {
  typeIndex          Int     
  index              Int   
  startAmount        Int
  amount_left       Int
  @@id([typeIndex, index], name: "typeIndex_index")
}

model VotingBooth {
  tokenId Int @id
  time_Stamp DateTime
}

model VotingPowerIds {
  tokenId Int @id
}

model TraitRedemption {
  l1_address String 
  l1_tokenId Int
  tokenId Int
  to String
  @@id([l1_address, l1_tokenId,tokenId], name: "l1_address_l1_tokenId_tokenId")
}

model KnownTraits {
  tokenId Int @id
}